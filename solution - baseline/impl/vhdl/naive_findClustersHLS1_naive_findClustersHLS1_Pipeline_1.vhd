-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity naive_findClustersHLS1_naive_findClustersHLS1_Pipeline_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    clusterGrid_x_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    clusterGrid_x_ce0 : OUT STD_LOGIC;
    clusterGrid_x_we0 : OUT STD_LOGIC;
    clusterGrid_x_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    clusterGrid_x_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    clusterGrid_x_ce1 : OUT STD_LOGIC;
    clusterGrid_x_we1 : OUT STD_LOGIC;
    clusterGrid_x_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    clusterGrid_y_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    clusterGrid_y_ce0 : OUT STD_LOGIC;
    clusterGrid_y_we0 : OUT STD_LOGIC;
    clusterGrid_y_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    clusterGrid_y_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    clusterGrid_y_ce1 : OUT STD_LOGIC;
    clusterGrid_y_we1 : OUT STD_LOGIC;
    clusterGrid_y_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    clusterGrid_clusterID_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    clusterGrid_clusterID_ce0 : OUT STD_LOGIC;
    clusterGrid_clusterID_we0 : OUT STD_LOGIC;
    clusterGrid_clusterID_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    clusterGrid_clusterID_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    clusterGrid_clusterID_ce1 : OUT STD_LOGIC;
    clusterGrid_clusterID_we1 : OUT STD_LOGIC;
    clusterGrid_clusterID_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of naive_findClustersHLS1_naive_findClustersHLS1_Pipeline_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_lv7_4 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_const_lv7_5 : STD_LOGIC_VECTOR (6 downto 0) := "0000101";
    constant ap_const_lv7_6 : STD_LOGIC_VECTOR (6 downto 0) := "0000110";
    constant ap_const_lv7_7 : STD_LOGIC_VECTOR (6 downto 0) := "0000111";
    constant ap_const_lv7_8 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_const_lv7_9 : STD_LOGIC_VECTOR (6 downto 0) := "0001001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal icmp_ln142_reg_517 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage4 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal add_ln142_1_fu_359_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln142_1_reg_505 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln142_fu_391_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln142_1_fu_365_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln142_2_fu_378_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln142_3_fu_407_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln142_4_fu_419_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln142_5_fu_431_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln142_6_fu_443_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln142_7_fu_455_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln142_8_fu_467_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln142_9_fu_479_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln142_10_fu_491_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvars_iv117_fu_54 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln142_fu_385_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_indvars_iv117_load : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal tmp_1_fu_347_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_339_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln142_fu_355_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln142_fu_372_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln142_2_fu_402_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln142_3_fu_414_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln142_4_fu_426_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln142_5_fu_438_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln142_6_fu_450_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln142_7_fu_462_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln142_8_fu_474_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln142_9_fu_486_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component naive_findClustersHLS1_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component naive_findClustersHLS1_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage4,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    indvars_iv117_fu_54_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                indvars_iv117_fu_54 <= add_ln142_fu_385_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    add_ln142_1_reg_505(6 downto 1) <= add_ln142_1_fu_359_p2(6 downto 1);
                icmp_ln142_reg_517 <= icmp_ln142_fu_391_p2;
            end if;
        end if;
    end process;
    add_ln142_1_reg_505(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state5, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln142_1_fu_359_p2 <= std_logic_vector(unsigned(tmp_fu_339_p3) + unsigned(zext_ln142_fu_355_p1));
    add_ln142_2_fu_402_p2 <= std_logic_vector(unsigned(add_ln142_1_reg_505) + unsigned(ap_const_lv7_2));
    add_ln142_3_fu_414_p2 <= std_logic_vector(unsigned(add_ln142_1_reg_505) + unsigned(ap_const_lv7_3));
    add_ln142_4_fu_426_p2 <= std_logic_vector(unsigned(add_ln142_1_reg_505) + unsigned(ap_const_lv7_4));
    add_ln142_5_fu_438_p2 <= std_logic_vector(unsigned(add_ln142_1_reg_505) + unsigned(ap_const_lv7_5));
    add_ln142_6_fu_450_p2 <= std_logic_vector(unsigned(add_ln142_1_reg_505) + unsigned(ap_const_lv7_6));
    add_ln142_7_fu_462_p2 <= std_logic_vector(unsigned(add_ln142_1_reg_505) + unsigned(ap_const_lv7_7));
    add_ln142_8_fu_474_p2 <= std_logic_vector(unsigned(add_ln142_1_reg_505) + unsigned(ap_const_lv7_8));
    add_ln142_9_fu_486_p2 <= std_logic_vector(unsigned(add_ln142_1_reg_505) + unsigned(ap_const_lv7_9));
    add_ln142_fu_385_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvars_iv117_load) + unsigned(ap_const_lv4_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start_int)
    begin
        if ((ap_start_int = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage4_assign_proc : process(ap_CS_fsm_state5, icmp_ln142_reg_517)
    begin
        if (((icmp_ln142_reg_517 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_condition_exit_pp0_iter0_stage4 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_state5, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage4;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvars_iv117_load_assign_proc : process(ap_CS_fsm_state1, indvars_iv117_fu_54, ap_loop_init)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvars_iv117_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_indvars_iv117_load <= indvars_iv117_fu_54;
        end if; 
    end process;


    clusterGrid_clusterID_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state5, zext_ln142_2_fu_378_p1, ap_CS_fsm_state2, zext_ln142_4_fu_419_p1, ap_CS_fsm_state3, zext_ln142_6_fu_443_p1, ap_CS_fsm_state4, zext_ln142_8_fu_467_p1, zext_ln142_10_fu_491_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            clusterGrid_clusterID_address0 <= zext_ln142_10_fu_491_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            clusterGrid_clusterID_address0 <= zext_ln142_8_fu_467_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            clusterGrid_clusterID_address0 <= zext_ln142_6_fu_443_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            clusterGrid_clusterID_address0 <= zext_ln142_4_fu_419_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            clusterGrid_clusterID_address0 <= zext_ln142_2_fu_378_p1(7 - 1 downto 0);
        else 
            clusterGrid_clusterID_address0 <= "XXXXXXX";
        end if; 
    end process;


    clusterGrid_clusterID_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state5, zext_ln142_1_fu_365_p1, zext_ln142_3_fu_407_p1, ap_CS_fsm_state2, zext_ln142_5_fu_431_p1, ap_CS_fsm_state3, zext_ln142_7_fu_455_p1, ap_CS_fsm_state4, zext_ln142_9_fu_479_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            clusterGrid_clusterID_address1 <= zext_ln142_9_fu_479_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            clusterGrid_clusterID_address1 <= zext_ln142_7_fu_455_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            clusterGrid_clusterID_address1 <= zext_ln142_5_fu_431_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            clusterGrid_clusterID_address1 <= zext_ln142_3_fu_407_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            clusterGrid_clusterID_address1 <= zext_ln142_1_fu_365_p1(7 - 1 downto 0);
        else 
            clusterGrid_clusterID_address1 <= "XXXXXXX";
        end if; 
    end process;


    clusterGrid_clusterID_ce0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state5, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            clusterGrid_clusterID_ce0 <= ap_const_logic_1;
        else 
            clusterGrid_clusterID_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    clusterGrid_clusterID_ce1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state5, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            clusterGrid_clusterID_ce1 <= ap_const_logic_1;
        else 
            clusterGrid_clusterID_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    clusterGrid_clusterID_d0 <= ap_const_lv32_0;
    clusterGrid_clusterID_d1 <= ap_const_lv32_0;

    clusterGrid_clusterID_we0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state5, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            clusterGrid_clusterID_we0 <= ap_const_logic_1;
        else 
            clusterGrid_clusterID_we0 <= ap_const_logic_0;
        end if; 
    end process;


    clusterGrid_clusterID_we1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state5, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            clusterGrid_clusterID_we1 <= ap_const_logic_1;
        else 
            clusterGrid_clusterID_we1 <= ap_const_logic_0;
        end if; 
    end process;


    clusterGrid_x_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state5, zext_ln142_2_fu_378_p1, ap_CS_fsm_state2, zext_ln142_4_fu_419_p1, ap_CS_fsm_state3, zext_ln142_6_fu_443_p1, ap_CS_fsm_state4, zext_ln142_8_fu_467_p1, zext_ln142_10_fu_491_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            clusterGrid_x_address0 <= zext_ln142_10_fu_491_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            clusterGrid_x_address0 <= zext_ln142_8_fu_467_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            clusterGrid_x_address0 <= zext_ln142_6_fu_443_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            clusterGrid_x_address0 <= zext_ln142_4_fu_419_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            clusterGrid_x_address0 <= zext_ln142_2_fu_378_p1(7 - 1 downto 0);
        else 
            clusterGrid_x_address0 <= "XXXXXXX";
        end if; 
    end process;


    clusterGrid_x_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state5, zext_ln142_1_fu_365_p1, zext_ln142_3_fu_407_p1, ap_CS_fsm_state2, zext_ln142_5_fu_431_p1, ap_CS_fsm_state3, zext_ln142_7_fu_455_p1, ap_CS_fsm_state4, zext_ln142_9_fu_479_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            clusterGrid_x_address1 <= zext_ln142_9_fu_479_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            clusterGrid_x_address1 <= zext_ln142_7_fu_455_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            clusterGrid_x_address1 <= zext_ln142_5_fu_431_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            clusterGrid_x_address1 <= zext_ln142_3_fu_407_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            clusterGrid_x_address1 <= zext_ln142_1_fu_365_p1(7 - 1 downto 0);
        else 
            clusterGrid_x_address1 <= "XXXXXXX";
        end if; 
    end process;


    clusterGrid_x_ce0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state5, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            clusterGrid_x_ce0 <= ap_const_logic_1;
        else 
            clusterGrid_x_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    clusterGrid_x_ce1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state5, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            clusterGrid_x_ce1 <= ap_const_logic_1;
        else 
            clusterGrid_x_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    clusterGrid_x_d0 <= ap_const_lv32_0;
    clusterGrid_x_d1 <= ap_const_lv32_0;

    clusterGrid_x_we0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state5, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            clusterGrid_x_we0 <= ap_const_logic_1;
        else 
            clusterGrid_x_we0 <= ap_const_logic_0;
        end if; 
    end process;


    clusterGrid_x_we1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state5, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            clusterGrid_x_we1 <= ap_const_logic_1;
        else 
            clusterGrid_x_we1 <= ap_const_logic_0;
        end if; 
    end process;


    clusterGrid_y_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state5, zext_ln142_2_fu_378_p1, ap_CS_fsm_state2, zext_ln142_4_fu_419_p1, ap_CS_fsm_state3, zext_ln142_6_fu_443_p1, ap_CS_fsm_state4, zext_ln142_8_fu_467_p1, zext_ln142_10_fu_491_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            clusterGrid_y_address0 <= zext_ln142_10_fu_491_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            clusterGrid_y_address0 <= zext_ln142_8_fu_467_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            clusterGrid_y_address0 <= zext_ln142_6_fu_443_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            clusterGrid_y_address0 <= zext_ln142_4_fu_419_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            clusterGrid_y_address0 <= zext_ln142_2_fu_378_p1(7 - 1 downto 0);
        else 
            clusterGrid_y_address0 <= "XXXXXXX";
        end if; 
    end process;


    clusterGrid_y_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state5, zext_ln142_1_fu_365_p1, zext_ln142_3_fu_407_p1, ap_CS_fsm_state2, zext_ln142_5_fu_431_p1, ap_CS_fsm_state3, zext_ln142_7_fu_455_p1, ap_CS_fsm_state4, zext_ln142_9_fu_479_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            clusterGrid_y_address1 <= zext_ln142_9_fu_479_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            clusterGrid_y_address1 <= zext_ln142_7_fu_455_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            clusterGrid_y_address1 <= zext_ln142_5_fu_431_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            clusterGrid_y_address1 <= zext_ln142_3_fu_407_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            clusterGrid_y_address1 <= zext_ln142_1_fu_365_p1(7 - 1 downto 0);
        else 
            clusterGrid_y_address1 <= "XXXXXXX";
        end if; 
    end process;


    clusterGrid_y_ce0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state5, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            clusterGrid_y_ce0 <= ap_const_logic_1;
        else 
            clusterGrid_y_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    clusterGrid_y_ce1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state5, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            clusterGrid_y_ce1 <= ap_const_logic_1;
        else 
            clusterGrid_y_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    clusterGrid_y_d0 <= ap_const_lv32_0;
    clusterGrid_y_d1 <= ap_const_lv32_0;

    clusterGrid_y_we0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state5, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            clusterGrid_y_we0 <= ap_const_logic_1;
        else 
            clusterGrid_y_we0 <= ap_const_logic_0;
        end if; 
    end process;


    clusterGrid_y_we1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state5, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            clusterGrid_y_we1 <= ap_const_logic_1;
        else 
            clusterGrid_y_we1 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln142_fu_391_p2 <= "1" when (ap_sig_allocacmp_indvars_iv117_load = ap_const_lv4_9) else "0";
    or_ln142_fu_372_p2 <= (ap_const_lv7_1 or add_ln142_1_fu_359_p2);
    tmp_1_fu_347_p3 <= (ap_sig_allocacmp_indvars_iv117_load & ap_const_lv1_0);
    tmp_fu_339_p3 <= (ap_sig_allocacmp_indvars_iv117_load & ap_const_lv3_0);
    zext_ln142_10_fu_491_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln142_9_fu_486_p2),64));
    zext_ln142_1_fu_365_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln142_1_fu_359_p2),64));
    zext_ln142_2_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln142_fu_372_p2),64));
    zext_ln142_3_fu_407_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln142_2_fu_402_p2),64));
    zext_ln142_4_fu_419_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln142_3_fu_414_p2),64));
    zext_ln142_5_fu_431_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln142_4_fu_426_p2),64));
    zext_ln142_6_fu_443_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln142_5_fu_438_p2),64));
    zext_ln142_7_fu_455_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln142_6_fu_450_p2),64));
    zext_ln142_8_fu_467_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln142_7_fu_462_p2),64));
    zext_ln142_9_fu_479_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln142_8_fu_474_p2),64));
    zext_ln142_fu_355_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_347_p3),7));
end behav;
