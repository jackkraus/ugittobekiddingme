-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity naive_findClustersHLS2_naive_findClustersHLS2_Pipeline_FirstPass_FirstPassInner is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    grid_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    grid_ce0 : OUT STD_LOGIC;
    grid_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    clusterGrid1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    clusterGrid1_ce0 : OUT STD_LOGIC;
    clusterGrid1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    clusterGrid1_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    clusterGrid1_ce1 : OUT STD_LOGIC;
    clusterGrid1_we1 : OUT STD_LOGIC;
    clusterGrid1_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    clusterGrid1_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of naive_findClustersHLS2_naive_findClustersHLS2_Pipeline_FirstPass_FirstPassInner is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln227_fu_174_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal icmp_ln227_reg_504 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln227_1_fu_180_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln227_1_reg_508 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln227_fu_204_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln227_reg_513 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln227_1_fu_212_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln227_1_reg_519 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln231_fu_240_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln231_reg_524 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln227_2_fu_252_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln227_2_reg_529 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln231_1_fu_260_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln231_1_reg_535 : STD_LOGIC_VECTOR (7 downto 0);
    signal clusterGrid1_addr_5_reg_545 : STD_LOGIC_VECTOR (7 downto 0);
    signal clusterGrid1_addr_3_reg_550 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal grid_load_reg_555 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln229_fu_310_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln229_reg_559 : STD_LOGIC_VECTOR (3 downto 0);
    signal clusterGrid1_addr_4_reg_564 : STD_LOGIC_VECTOR (7 downto 0);
    signal minClusterID_load_reg_579 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal minClusterID_12_fu_395_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal minClusterID_12_reg_586 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln231_2_fu_270_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln235_fu_305_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln236_1_fu_325_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln233_1_fu_344_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln234_1_fu_355_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_64 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j_load : STD_LOGIC_VECTOR (3 downto 0);
    signal i_fu_68 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_i_load : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_fu_72 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (6 downto 0);
    signal minClusterID_fu_76 : STD_LOGIC_VECTOR (15 downto 0);
    signal maxClusterID_1_fu_452_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal minClusterID_16_fu_433_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln229_fu_198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln227_fu_192_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_228_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_fu_220_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln231_fu_236_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_fu_246_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln231_fu_264_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_283_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_4_fu_276_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln234_fu_290_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln234_fu_294_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln235_fu_300_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln236_fu_315_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln236_fu_319_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln233_fu_330_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln233_fu_335_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln233_1_fu_339_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln234_fu_349_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_139_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln238_1_fu_363_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln238_fu_369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal minClusterID_10_fu_375_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_145_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln239_1_fu_383_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln239_fu_389_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln240_1_fu_403_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln240_fu_408_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal minClusterID_14_fu_414_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln241_1_fu_421_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln241_fu_427_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln243_fu_442_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal maxClusterID_fu_447_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component naive_findClustersHLS2_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component naive_findClustersHLS2_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_start_int = ap_const_logic_1) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
                i_fu_68 <= ap_const_lv4_1;
            elsif (((icmp_ln227_reg_504 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_fu_68 <= select_ln227_1_reg_519;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
                indvar_flatten_fu_72 <= ap_const_lv7_0;
            elsif (((icmp_ln227_reg_504 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                indvar_flatten_fu_72 <= add_ln227_1_reg_508;
            end if; 
        end if;
    end process;

    j_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
                j_fu_64 <= ap_const_lv4_1;
            elsif (((icmp_ln227_reg_504 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                j_fu_64 <= add_ln229_reg_559;
            end if; 
        end if;
    end process;

    minClusterID_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
                minClusterID_fu_76 <= ap_const_lv16_1;
            elsif (((grid_load_reg_555 = ap_const_lv1_1) and (icmp_ln227_reg_504 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                minClusterID_fu_76 <= maxClusterID_1_fu_452_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                add_ln227_1_reg_508 <= add_ln227_1_fu_180_p2;
                icmp_ln227_reg_504 <= icmp_ln227_fu_174_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln229_reg_559 <= add_ln229_fu_310_p2;
                clusterGrid1_addr_3_reg_550 <= zext_ln235_fu_305_p1(8 - 1 downto 0);
                clusterGrid1_addr_4_reg_564 <= zext_ln236_1_fu_325_p1(8 - 1 downto 0);
                grid_load_reg_555 <= grid_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (icmp_ln227_fu_174_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                clusterGrid1_addr_5_reg_545 <= zext_ln231_2_fu_270_p1(8 - 1 downto 0);
                select_ln227_1_reg_519 <= select_ln227_1_fu_212_p3;
                select_ln227_2_reg_529 <= select_ln227_2_fu_252_p3;
                select_ln227_reg_513 <= select_ln227_fu_204_p3;
                    sub_ln231_reg_524(7 downto 2) <= sub_ln231_fu_240_p2(7 downto 2);
                    zext_ln231_1_reg_535(3 downto 0) <= zext_ln231_1_fu_260_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grid_load_reg_555 = ap_const_lv1_1) and (icmp_ln227_reg_504 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                minClusterID_12_reg_586 <= minClusterID_12_fu_395_p3;
                minClusterID_load_reg_579 <= minClusterID_fu_76;
            end if;
        end if;
    end process;
    sub_ln231_reg_524(1 downto 0) <= "00";
    zext_ln231_1_reg_535(7 downto 4) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, icmp_ln227_fu_174_p2, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start_int = ap_const_logic_1) and (icmp_ln227_fu_174_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln227_1_fu_180_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv7_1));
    add_ln227_fu_192_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_load) + unsigned(ap_const_lv4_1));
    add_ln229_fu_310_p2 <= std_logic_vector(unsigned(select_ln227_reg_513) + unsigned(ap_const_lv4_1));
    add_ln231_fu_264_p2 <= std_logic_vector(unsigned(sub_ln231_fu_240_p2) + unsigned(zext_ln231_1_fu_260_p1));
    add_ln233_1_fu_339_p2 <= std_logic_vector(unsigned(sub_ln231_reg_524) + unsigned(zext_ln233_fu_335_p1));
    add_ln233_fu_330_p2 <= std_logic_vector(unsigned(select_ln227_reg_513) + unsigned(ap_const_lv4_F));
    add_ln234_fu_349_p2 <= std_logic_vector(unsigned(sub_ln234_fu_294_p2) + unsigned(zext_ln233_fu_335_p1));
    add_ln235_fu_300_p2 <= std_logic_vector(unsigned(sub_ln234_fu_294_p2) + unsigned(zext_ln231_1_reg_535));
    add_ln236_fu_319_p2 <= std_logic_vector(unsigned(sub_ln234_fu_294_p2) + unsigned(zext_ln236_fu_315_p1));
    and_ln238_fu_369_p2 <= (icmp_ln238_1_fu_363_p2 and grp_fu_139_p2);
    and_ln239_fu_389_p2 <= (icmp_ln239_1_fu_383_p2 and grp_fu_145_p2);
    and_ln240_fu_408_p2 <= (icmp_ln240_1_fu_403_p2 and grp_fu_139_p2);
    and_ln241_fu_427_p2 <= (icmp_ln241_1_fu_421_p2 and grp_fu_145_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start_int)
    begin
        if ((ap_start_int = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, icmp_ln227_fu_174_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln227_fu_174_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_state1, ap_loop_exit_ready, ap_done_reg, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_load_assign_proc : process(ap_CS_fsm_state1, ap_loop_init, i_fu_68)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_load <= ap_const_lv4_1;
        else 
            ap_sig_allocacmp_i_load <= i_fu_68;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_state1, ap_loop_init, indvar_flatten_fu_72)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_72;
        end if; 
    end process;


    ap_sig_allocacmp_j_load_assign_proc : process(ap_CS_fsm_state1, j_fu_64, ap_loop_init)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_j_load <= ap_const_lv4_1;
        else 
            ap_sig_allocacmp_j_load <= j_fu_64;
        end if; 
    end process;


    clusterGrid1_address0_assign_proc : process(grid_q0, icmp_ln227_reg_504, ap_CS_fsm_state2, grid_load_reg_555, clusterGrid1_addr_4_reg_564, ap_CS_fsm_state3, zext_ln234_1_fu_355_p1)
    begin
        if (((grid_load_reg_555 = ap_const_lv1_1) and (icmp_ln227_reg_504 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            clusterGrid1_address0 <= clusterGrid1_addr_4_reg_564;
        elsif (((grid_q0 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            clusterGrid1_address0 <= zext_ln234_1_fu_355_p1(8 - 1 downto 0);
        else 
            clusterGrid1_address0 <= "XXXXXXXX";
        end if; 
    end process;


    clusterGrid1_address1_assign_proc : process(ap_CS_fsm_state4, grid_q0, icmp_ln227_reg_504, clusterGrid1_addr_5_reg_545, clusterGrid1_addr_3_reg_550, ap_CS_fsm_state2, grid_load_reg_555, ap_CS_fsm_state3, zext_ln233_1_fu_344_p1)
    begin
        if (((grid_load_reg_555 = ap_const_lv1_1) and (icmp_ln227_reg_504 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            clusterGrid1_address1 <= clusterGrid1_addr_5_reg_545;
        elsif (((grid_load_reg_555 = ap_const_lv1_1) and (icmp_ln227_reg_504 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            clusterGrid1_address1 <= clusterGrid1_addr_3_reg_550;
        elsif (((grid_q0 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            clusterGrid1_address1 <= zext_ln233_1_fu_344_p1(8 - 1 downto 0);
        else 
            clusterGrid1_address1 <= "XXXXXXXX";
        end if; 
    end process;


    clusterGrid1_ce0_assign_proc : process(grid_q0, icmp_ln227_reg_504, ap_CS_fsm_state2, grid_load_reg_555, ap_CS_fsm_state3)
    begin
        if ((((grid_q0 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((grid_load_reg_555 = ap_const_lv1_1) and (icmp_ln227_reg_504 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            clusterGrid1_ce0 <= ap_const_logic_1;
        else 
            clusterGrid1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    clusterGrid1_ce1_assign_proc : process(ap_CS_fsm_state4, grid_q0, icmp_ln227_reg_504, ap_CS_fsm_state2, grid_load_reg_555, ap_CS_fsm_state3)
    begin
        if ((((grid_q0 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((grid_load_reg_555 = ap_const_lv1_1) and (icmp_ln227_reg_504 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((grid_load_reg_555 = ap_const_lv1_1) and (icmp_ln227_reg_504 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            clusterGrid1_ce1 <= ap_const_logic_1;
        else 
            clusterGrid1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    clusterGrid1_d1 <= minClusterID_16_fu_433_p3;

    clusterGrid1_we1_assign_proc : process(ap_CS_fsm_state4, icmp_ln227_reg_504, grid_load_reg_555)
    begin
        if (((grid_load_reg_555 = ap_const_lv1_1) and (icmp_ln227_reg_504 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            clusterGrid1_we1 <= ap_const_logic_1;
        else 
            clusterGrid1_we1 <= ap_const_logic_0;
        end if; 
    end process;

    empty_fu_246_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_load) + unsigned(ap_const_lv4_F));
    grid_address0 <= zext_ln231_2_fu_270_p1(8 - 1 downto 0);

    grid_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            grid_ce0 <= ap_const_logic_1;
        else 
            grid_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_139_p2 <= "0" when (clusterGrid1_q1 = ap_const_lv16_0) else "1";
    grp_fu_145_p2 <= "0" when (clusterGrid1_q0 = ap_const_lv16_0) else "1";
    icmp_ln227_fu_174_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv7_64) else "0";
    icmp_ln229_fu_198_p2 <= "1" when (ap_sig_allocacmp_j_load = ap_const_lv4_B) else "0";
    icmp_ln238_1_fu_363_p2 <= "1" when (signed(clusterGrid1_q1) < signed(minClusterID_fu_76)) else "0";
    icmp_ln239_1_fu_383_p2 <= "1" when (signed(clusterGrid1_q0) < signed(minClusterID_10_fu_375_p3)) else "0";
    icmp_ln240_1_fu_403_p2 <= "1" when (signed(clusterGrid1_q1) < signed(minClusterID_12_reg_586)) else "0";
    icmp_ln241_1_fu_421_p2 <= "1" when (signed(clusterGrid1_q0) < signed(minClusterID_14_fu_414_p3)) else "0";
    icmp_ln243_fu_442_p2 <= "1" when (minClusterID_16_fu_433_p3 = minClusterID_load_reg_579) else "0";
    maxClusterID_1_fu_452_p3 <= 
        maxClusterID_fu_447_p2 when (icmp_ln243_fu_442_p2(0) = '1') else 
        minClusterID_load_reg_579;
    maxClusterID_fu_447_p2 <= std_logic_vector(unsigned(minClusterID_load_reg_579) + unsigned(ap_const_lv16_1));
    minClusterID_10_fu_375_p3 <= 
        clusterGrid1_q1 when (and_ln238_fu_369_p2(0) = '1') else 
        minClusterID_fu_76;
    minClusterID_12_fu_395_p3 <= 
        clusterGrid1_q0 when (and_ln239_fu_389_p2(0) = '1') else 
        minClusterID_10_fu_375_p3;
    minClusterID_14_fu_414_p3 <= 
        clusterGrid1_q1 when (and_ln240_fu_408_p2(0) = '1') else 
        minClusterID_12_reg_586;
    minClusterID_16_fu_433_p3 <= 
        clusterGrid1_q0 when (and_ln241_fu_427_p2(0) = '1') else 
        minClusterID_14_fu_414_p3;
    select_ln227_1_fu_212_p3 <= 
        add_ln227_fu_192_p2 when (icmp_ln229_fu_198_p2(0) = '1') else 
        ap_sig_allocacmp_i_load;
    select_ln227_2_fu_252_p3 <= 
        ap_sig_allocacmp_i_load when (icmp_ln229_fu_198_p2(0) = '1') else 
        empty_fu_246_p2;
    select_ln227_fu_204_p3 <= 
        ap_const_lv4_1 when (icmp_ln229_fu_198_p2(0) = '1') else 
        ap_sig_allocacmp_j_load;
    sub_ln231_fu_240_p2 <= std_logic_vector(unsigned(tmp_2_fu_220_p3) - unsigned(zext_ln231_fu_236_p1));
    sub_ln234_fu_294_p2 <= std_logic_vector(unsigned(tmp_4_fu_276_p3) - unsigned(zext_ln234_fu_290_p1));
    tmp_2_fu_220_p3 <= (select_ln227_1_fu_212_p3 & ap_const_lv4_0);
    tmp_3_fu_228_p3 <= (select_ln227_1_fu_212_p3 & ap_const_lv2_0);
    tmp_4_fu_276_p3 <= (select_ln227_2_reg_529 & ap_const_lv4_0);
    tmp_5_fu_283_p3 <= (select_ln227_2_reg_529 & ap_const_lv2_0);
    zext_ln231_1_fu_260_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln227_fu_204_p3),8));
    zext_ln231_2_fu_270_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln231_fu_264_p2),64));
    zext_ln231_fu_236_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_228_p3),8));
    zext_ln233_1_fu_344_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln233_1_fu_339_p2),64));
    zext_ln233_fu_335_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln233_fu_330_p2),8));
    zext_ln234_1_fu_355_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln234_fu_349_p2),64));
    zext_ln234_fu_290_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_283_p3),8));
    zext_ln235_fu_305_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln235_fu_300_p2),64));
    zext_ln236_1_fu_325_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln236_fu_319_p2),64));
    zext_ln236_fu_315_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln229_fu_310_p2),8));
end behav;
