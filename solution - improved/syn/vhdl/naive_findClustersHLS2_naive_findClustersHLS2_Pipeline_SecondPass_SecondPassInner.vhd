-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity naive_findClustersHLS2_naive_findClustersHLS2_Pipeline_SecondPass_SecondPassInner is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    grid_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    grid_ce0 : OUT STD_LOGIC;
    grid_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    clusterGrid1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    clusterGrid1_ce0 : OUT STD_LOGIC;
    clusterGrid1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    clusterGrid1_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    clusterGrid1_ce1 : OUT STD_LOGIC;
    clusterGrid1_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    clusterGrid2_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    clusterGrid2_ce1 : OUT STD_LOGIC;
    clusterGrid2_we1 : OUT STD_LOGIC;
    clusterGrid2_d1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of naive_findClustersHLS2_naive_findClustersHLS2_Pipeline_SecondPass_SecondPassInner is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln252_fu_245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_block_state11_pp0_stage10_iter0 : BOOLEAN;
    signal icmp_ln252_reg_555 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln252_fu_251_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln252_reg_559 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln252_fu_269_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln252_reg_564 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln252_1_fu_283_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln252_1_reg_571 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln256_fu_311_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln256_reg_576 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln252_2_fu_323_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln252_2_reg_582 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln256_1_fu_331_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln256_1_reg_588 : STD_LOGIC_VECTOR (7 downto 0);
    signal clusterGrid1_addr_reg_598 : STD_LOGIC_VECTOR (7 downto 0);
    signal clusterGrid2_addr_reg_603 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln260_fu_366_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln260_reg_608 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal add_ln261_fu_372_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln261_reg_613 : STD_LOGIC_VECTOR (7 downto 0);
    signal clusterGrid1_addr_1_reg_618 : STD_LOGIC_VECTOR (7 downto 0);
    signal clusterGrid2_addr_1_reg_623 : STD_LOGIC_VECTOR (7 downto 0);
    signal grid_load_reg_628 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln254_fu_383_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln254_reg_632 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln260_fu_403_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln260_reg_643 : STD_LOGIC_VECTOR (7 downto 0);
    signal clusterGrid1_addr_3_reg_648 : STD_LOGIC_VECTOR (7 downto 0);
    signal clusterGrid2_addr_2_reg_653 : STD_LOGIC_VECTOR (7 downto 0);
    signal clusterGrid2_addr_3_reg_658 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln262_1_fu_424_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln262_1_reg_663 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal add_ln259_1_fu_457_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln259_1_reg_669 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln265_fu_473_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln265_reg_679 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal zext_ln262_1_fu_484_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln262_1_reg_689 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal select_ln266_fu_494_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln266_reg_699 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_block_state6_pp0_stage5_iter0 : BOOLEAN;
    signal minClusterID_8_reg_714 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_block_state7_pp0_stage6_iter0 : BOOLEAN;
    signal zext_ln256_2_fu_341_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln261_fu_377_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln259_1_fu_397_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln260_1_fu_409_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln259_3_fu_462_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln260_2_fu_479_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln261_1_fu_500_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln262_2_fu_517_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_66 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j_load : STD_LOGIC_VECTOR (3 downto 0);
    signal i_fu_70 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_i_load : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten6_fu_74 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_allocacmp_indvar_flatten6_load : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_block_state8_pp0_stage7_iter0 : BOOLEAN;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_block_state9_pp0_stage8_iter0 : BOOLEAN;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_block_state10_pp0_stage9_iter0 : BOOLEAN;
    signal icmp_ln254_fu_263_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvars_iv_next24916_fu_277_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_fu_299_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_6_fu_291_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln256_fu_307_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvars_iv_next249_mid1_fu_317_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln256_fu_335_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_355_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_8_fu_348_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln260_fu_362_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln259_fu_388_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln259_fu_392_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln262_fu_415_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln262_fu_420_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln264_fu_429_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln264_1_fu_435_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln264_fu_441_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln264_fu_447_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln259_2_fu_453_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_221_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln265_fu_467_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln266_fu_488_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln267_fu_505_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln267_fu_511_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component naive_findClustersHLS2_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component naive_findClustersHLS2_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_start_int = ap_const_logic_1) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
                i_fu_70 <= ap_const_lv4_1;
            elsif (((icmp_ln252_reg_555 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                i_fu_70 <= select_ln252_1_reg_571;
            end if; 
        end if;
    end process;

    indvar_flatten6_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
                indvar_flatten6_fu_74 <= ap_const_lv7_0;
            elsif (((icmp_ln252_reg_555 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                indvar_flatten6_fu_74 <= add_ln252_reg_559;
            end if; 
        end if;
    end process;

    j_fu_66_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
                j_fu_66 <= ap_const_lv4_1;
            elsif (((icmp_ln252_reg_555 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                j_fu_66 <= add_ln254_reg_632;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                add_ln252_reg_559 <= add_ln252_fu_251_p2;
                icmp_ln252_reg_555 <= icmp_ln252_fu_245_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln254_reg_632 <= add_ln254_fu_383_p2;
                add_ln260_reg_643 <= add_ln260_fu_403_p2;
                add_ln261_reg_613 <= add_ln261_fu_372_p2;
                clusterGrid1_addr_1_reg_618 <= zext_ln261_fu_377_p1(8 - 1 downto 0);
                clusterGrid1_addr_3_reg_648 <= zext_ln260_1_fu_409_p1(8 - 1 downto 0);
                clusterGrid2_addr_1_reg_623 <= zext_ln261_fu_377_p1(8 - 1 downto 0);
                clusterGrid2_addr_2_reg_653 <= zext_ln259_1_fu_397_p1(8 - 1 downto 0);
                clusterGrid2_addr_3_reg_658 <= zext_ln260_1_fu_409_p1(8 - 1 downto 0);
                grid_load_reg_628 <= grid_q0;
                    sub_ln260_reg_608(7 downto 2) <= sub_ln260_fu_366_p2(7 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln252_reg_555 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (grid_load_reg_628 = ap_const_lv1_1))) then
                add_ln259_1_reg_669 <= add_ln259_1_fu_457_p2;
                add_ln262_1_reg_663 <= add_ln262_1_fu_424_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (icmp_ln252_fu_245_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                clusterGrid1_addr_reg_598 <= zext_ln256_2_fu_341_p1(8 - 1 downto 0);
                clusterGrid2_addr_reg_603 <= zext_ln256_2_fu_341_p1(8 - 1 downto 0);
                select_ln252_1_reg_571 <= select_ln252_1_fu_283_p3;
                select_ln252_2_reg_582 <= select_ln252_2_fu_323_p3;
                select_ln252_reg_564 <= select_ln252_fu_269_p3;
                    sub_ln256_reg_576(7 downto 2) <= sub_ln256_fu_311_p2(7 downto 2);
                    zext_ln256_1_reg_588(3 downto 0) <= zext_ln256_1_fu_331_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln252_reg_555 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7) and (grid_load_reg_628 = ap_const_lv1_1))) then
                minClusterID_8_reg_714 <= clusterGrid1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln252_reg_555 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4) and (grid_load_reg_628 = ap_const_lv1_1))) then
                select_ln265_reg_679 <= select_ln265_fu_473_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln252_reg_555 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5) and (grid_load_reg_628 = ap_const_lv1_1))) then
                select_ln266_reg_699 <= select_ln266_fu_494_p3;
                    zext_ln262_1_reg_689(7 downto 0) <= zext_ln262_1_fu_484_p1(7 downto 0);
            end if;
        end if;
    end process;
    sub_ln256_reg_576(1 downto 0) <= "00";
    zext_ln256_1_reg_588(7 downto 4) <= "0000";
    sub_ln260_reg_608(1 downto 0) <= "00";
    zext_ln262_1_reg_689(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, icmp_ln252_fu_245_p2, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start_int = ap_const_logic_1) and (icmp_ln252_fu_245_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    add_ln252_fu_251_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten6_load) + unsigned(ap_const_lv7_1));
    add_ln254_fu_383_p2 <= std_logic_vector(unsigned(select_ln252_reg_564) + unsigned(ap_const_lv4_1));
    add_ln256_fu_335_p2 <= std_logic_vector(unsigned(sub_ln256_fu_311_p2) + unsigned(zext_ln256_1_fu_331_p1));
    add_ln259_1_fu_457_p2 <= std_logic_vector(unsigned(sub_ln256_reg_576) + unsigned(zext_ln259_2_fu_453_p1));
    add_ln259_fu_392_p2 <= std_logic_vector(unsigned(sub_ln256_reg_576) + unsigned(zext_ln259_fu_388_p1));
    add_ln260_fu_403_p2 <= std_logic_vector(unsigned(sub_ln260_fu_366_p2) + unsigned(zext_ln259_fu_388_p1));
    add_ln261_fu_372_p2 <= std_logic_vector(unsigned(sub_ln260_fu_366_p2) + unsigned(zext_ln256_1_reg_588));
    add_ln262_1_fu_424_p2 <= std_logic_vector(unsigned(sub_ln260_reg_608) + unsigned(zext_ln262_fu_420_p1));
    add_ln262_fu_415_p2 <= std_logic_vector(unsigned(select_ln252_reg_564) + unsigned(ap_const_lv4_F));
    and_ln264_fu_441_p2 <= (icmp_ln264_fu_429_p2 and icmp_ln264_1_fu_435_p2);
    and_ln265_fu_467_p2 <= (grp_fu_221_p2 and grp_fu_215_p2);
    and_ln266_fu_488_p2 <= (grp_fu_221_p2 and grp_fu_215_p2);
    and_ln267_fu_505_p2 <= (grp_fu_221_p2 and grp_fu_215_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start_int)
    begin
        if ((ap_start_int = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;
        ap_block_state10_pp0_stage9_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage10_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage8_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, icmp_ln252_fu_245_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln252_fu_245_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_state1, ap_loop_exit_ready, ap_done_reg, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_load_assign_proc : process(ap_CS_fsm_state1, ap_loop_init, i_fu_70)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_load <= ap_const_lv4_1;
        else 
            ap_sig_allocacmp_i_load <= i_fu_70;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten6_load_assign_proc : process(ap_CS_fsm_state1, ap_loop_init, indvar_flatten6_fu_74)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten6_load <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_indvar_flatten6_load <= indvar_flatten6_fu_74;
        end if; 
    end process;


    ap_sig_allocacmp_j_load_assign_proc : process(ap_CS_fsm_state1, j_fu_66, ap_loop_init)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_j_load <= ap_const_lv4_1;
        else 
            ap_sig_allocacmp_j_load <= j_fu_66;
        end if; 
    end process;


    clusterGrid1_address0_assign_proc : process(grid_q0, icmp_ln252_reg_555, ap_CS_fsm_state2, grid_load_reg_628, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, zext_ln259_1_fu_397_p1, zext_ln259_3_fu_462_p1, zext_ln260_2_fu_479_p1, zext_ln261_1_fu_500_p1, zext_ln262_2_fu_517_p1)
    begin
        if (((icmp_ln252_reg_555 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (grid_load_reg_628 = ap_const_lv1_1))) then 
            clusterGrid1_address0 <= zext_ln262_2_fu_517_p1(8 - 1 downto 0);
        elsif (((icmp_ln252_reg_555 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5) and (grid_load_reg_628 = ap_const_lv1_1))) then 
            clusterGrid1_address0 <= zext_ln261_1_fu_500_p1(8 - 1 downto 0);
        elsif (((icmp_ln252_reg_555 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4) and (grid_load_reg_628 = ap_const_lv1_1))) then 
            clusterGrid1_address0 <= zext_ln260_2_fu_479_p1(8 - 1 downto 0);
        elsif (((icmp_ln252_reg_555 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (grid_load_reg_628 = ap_const_lv1_1))) then 
            clusterGrid1_address0 <= zext_ln259_3_fu_462_p1(8 - 1 downto 0);
        elsif (((grid_q0 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            clusterGrid1_address0 <= zext_ln259_1_fu_397_p1(8 - 1 downto 0);
        else 
            clusterGrid1_address0 <= "XXXXXXXX";
        end if; 
    end process;


    clusterGrid1_address1_assign_proc : process(grid_q0, icmp_ln252_reg_555, clusterGrid1_addr_reg_598, ap_CS_fsm_state2, clusterGrid1_addr_1_reg_618, grid_load_reg_628, clusterGrid1_addr_3_reg_648, ap_CS_fsm_state3, ap_CS_fsm_state4, zext_ln262_1_fu_484_p1, ap_CS_fsm_state5)
    begin
        if (((icmp_ln252_reg_555 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5) and (grid_load_reg_628 = ap_const_lv1_1))) then 
            clusterGrid1_address1 <= zext_ln262_1_fu_484_p1(8 - 1 downto 0);
        elsif (((icmp_ln252_reg_555 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4) and (grid_load_reg_628 = ap_const_lv1_1))) then 
            clusterGrid1_address1 <= clusterGrid1_addr_1_reg_618;
        elsif (((icmp_ln252_reg_555 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (grid_load_reg_628 = ap_const_lv1_1))) then 
            clusterGrid1_address1 <= clusterGrid1_addr_3_reg_648;
        elsif (((grid_q0 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            clusterGrid1_address1 <= clusterGrid1_addr_reg_598;
        else 
            clusterGrid1_address1 <= "XXXXXXXX";
        end if; 
    end process;


    clusterGrid1_ce0_assign_proc : process(grid_q0, icmp_ln252_reg_555, ap_CS_fsm_state2, grid_load_reg_628, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((((grid_q0 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((icmp_ln252_reg_555 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (grid_load_reg_628 = ap_const_lv1_1)) or ((icmp_ln252_reg_555 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5) and (grid_load_reg_628 = ap_const_lv1_1)) or ((icmp_ln252_reg_555 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4) and (grid_load_reg_628 = ap_const_lv1_1)) or ((icmp_ln252_reg_555 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (grid_load_reg_628 = ap_const_lv1_1)))) then 
            clusterGrid1_ce0 <= ap_const_logic_1;
        else 
            clusterGrid1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    clusterGrid1_ce1_assign_proc : process(grid_q0, icmp_ln252_reg_555, ap_CS_fsm_state2, grid_load_reg_628, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if ((((grid_q0 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((icmp_ln252_reg_555 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5) and (grid_load_reg_628 = ap_const_lv1_1)) or ((icmp_ln252_reg_555 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4) and (grid_load_reg_628 = ap_const_lv1_1)) or ((icmp_ln252_reg_555 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (grid_load_reg_628 = ap_const_lv1_1)))) then 
            clusterGrid1_ce1 <= ap_const_logic_1;
        else 
            clusterGrid1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    clusterGrid2_address1_assign_proc : process(ap_CS_fsm_state11, icmp_ln252_reg_555, clusterGrid2_addr_reg_603, clusterGrid2_addr_1_reg_623, grid_load_reg_628, clusterGrid2_addr_2_reg_653, clusterGrid2_addr_3_reg_658, zext_ln262_1_reg_689, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((icmp_ln252_reg_555 = ap_const_lv1_0) and (grid_load_reg_628 = ap_const_lv1_1))) then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                clusterGrid2_address1 <= zext_ln262_1_reg_689(8 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                clusterGrid2_address1 <= clusterGrid2_addr_1_reg_623;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                clusterGrid2_address1 <= clusterGrid2_addr_3_reg_658;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                clusterGrid2_address1 <= clusterGrid2_addr_2_reg_653;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                clusterGrid2_address1 <= clusterGrid2_addr_reg_603;
            else 
                clusterGrid2_address1 <= "XXXXXXXX";
            end if;
        else 
            clusterGrid2_address1 <= "XXXXXXXX";
        end if; 
    end process;


    clusterGrid2_ce1_assign_proc : process(ap_CS_fsm_state11, icmp_ln252_reg_555, grid_load_reg_628, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if ((((icmp_ln252_reg_555 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11) and (grid_load_reg_628 = ap_const_lv1_1)) or ((icmp_ln252_reg_555 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10) and (grid_load_reg_628 = ap_const_lv1_1)) or ((icmp_ln252_reg_555 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9) and (grid_load_reg_628 = ap_const_lv1_1)) or ((icmp_ln252_reg_555 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8) and (grid_load_reg_628 = ap_const_lv1_1)) or ((icmp_ln252_reg_555 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7) and (grid_load_reg_628 = ap_const_lv1_1)))) then 
            clusterGrid2_ce1 <= ap_const_logic_1;
        else 
            clusterGrid2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    clusterGrid2_d1_assign_proc : process(ap_CS_fsm_state11, clusterGrid1_q0, icmp_ln252_reg_555, grid_load_reg_628, minClusterID_8_reg_714, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if ((((icmp_ln252_reg_555 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11) and (grid_load_reg_628 = ap_const_lv1_1)) or ((icmp_ln252_reg_555 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10) and (grid_load_reg_628 = ap_const_lv1_1)) or ((icmp_ln252_reg_555 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9) and (grid_load_reg_628 = ap_const_lv1_1)) or ((icmp_ln252_reg_555 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8) and (grid_load_reg_628 = ap_const_lv1_1)))) then 
            clusterGrid2_d1 <= minClusterID_8_reg_714;
        elsif (((icmp_ln252_reg_555 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7) and (grid_load_reg_628 = ap_const_lv1_1))) then 
            clusterGrid2_d1 <= clusterGrid1_q0;
        else 
            clusterGrid2_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    clusterGrid2_we1_assign_proc : process(ap_CS_fsm_state11, icmp_ln252_reg_555, grid_load_reg_628, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if ((((icmp_ln252_reg_555 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11) and (grid_load_reg_628 = ap_const_lv1_1)) or ((icmp_ln252_reg_555 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10) and (grid_load_reg_628 = ap_const_lv1_1)) or ((icmp_ln252_reg_555 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9) and (grid_load_reg_628 = ap_const_lv1_1)) or ((icmp_ln252_reg_555 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8) and (grid_load_reg_628 = ap_const_lv1_1)) or ((icmp_ln252_reg_555 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7) and (grid_load_reg_628 = ap_const_lv1_1)))) then 
            clusterGrid2_we1 <= ap_const_logic_1;
        else 
            clusterGrid2_we1 <= ap_const_logic_0;
        end if; 
    end process;

    grid_address0 <= zext_ln256_2_fu_341_p1(8 - 1 downto 0);

    grid_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            grid_ce0 <= ap_const_logic_1;
        else 
            grid_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_215_p2 <= "0" when (clusterGrid1_q1 = ap_const_lv16_0) else "1";
    grp_fu_221_p2 <= "1" when (signed(clusterGrid1_q1) < signed(clusterGrid1_q0)) else "0";
    icmp_ln252_fu_245_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten6_load = ap_const_lv7_64) else "0";
    icmp_ln254_fu_263_p2 <= "1" when (ap_sig_allocacmp_j_load = ap_const_lv4_B) else "0";
    icmp_ln264_1_fu_435_p2 <= "1" when (signed(clusterGrid1_q0) < signed(clusterGrid1_q1)) else "0";
    icmp_ln264_fu_429_p2 <= "0" when (clusterGrid1_q0 = ap_const_lv16_0) else "1";
    indvars_iv_next24916_fu_277_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_load) + unsigned(ap_const_lv4_1));
    indvars_iv_next249_mid1_fu_317_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_load) + unsigned(ap_const_lv4_2));
    select_ln252_1_fu_283_p3 <= 
        indvars_iv_next24916_fu_277_p2 when (icmp_ln254_fu_263_p2(0) = '1') else 
        ap_sig_allocacmp_i_load;
    select_ln252_2_fu_323_p3 <= 
        indvars_iv_next249_mid1_fu_317_p2 when (icmp_ln254_fu_263_p2(0) = '1') else 
        indvars_iv_next24916_fu_277_p2;
    select_ln252_fu_269_p3 <= 
        ap_const_lv4_1 when (icmp_ln254_fu_263_p2(0) = '1') else 
        ap_sig_allocacmp_j_load;
    select_ln264_fu_447_p3 <= 
        add_ln254_reg_632 when (and_ln264_fu_441_p2(0) = '1') else 
        select_ln252_reg_564;
    select_ln265_fu_473_p3 <= 
        add_ln260_reg_643 when (and_ln265_fu_467_p2(0) = '1') else 
        add_ln259_1_reg_669;
    select_ln266_fu_494_p3 <= 
        add_ln261_reg_613 when (and_ln266_fu_488_p2(0) = '1') else 
        select_ln265_reg_679;
    select_ln267_fu_511_p3 <= 
        add_ln262_1_reg_663 when (and_ln267_fu_505_p2(0) = '1') else 
        select_ln266_reg_699;
    sub_ln256_fu_311_p2 <= std_logic_vector(unsigned(tmp_6_fu_291_p3) - unsigned(zext_ln256_fu_307_p1));
    sub_ln260_fu_366_p2 <= std_logic_vector(unsigned(tmp_8_fu_348_p3) - unsigned(zext_ln260_fu_362_p1));
    tmp_6_fu_291_p3 <= (select_ln252_1_fu_283_p3 & ap_const_lv4_0);
    tmp_7_fu_299_p3 <= (select_ln252_1_fu_283_p3 & ap_const_lv2_0);
    tmp_8_fu_348_p3 <= (select_ln252_2_reg_582 & ap_const_lv4_0);
    tmp_9_fu_355_p3 <= (select_ln252_2_reg_582 & ap_const_lv2_0);
    zext_ln256_1_fu_331_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln252_fu_269_p3),8));
    zext_ln256_2_fu_341_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln256_fu_335_p2),64));
    zext_ln256_fu_307_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_299_p3),8));
    zext_ln259_1_fu_397_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln259_fu_392_p2),64));
    zext_ln259_2_fu_453_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln264_fu_447_p3),8));
    zext_ln259_3_fu_462_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln259_1_fu_457_p2),64));
    zext_ln259_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln254_fu_383_p2),8));
    zext_ln260_1_fu_409_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln260_fu_403_p2),64));
    zext_ln260_2_fu_479_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln265_fu_473_p3),64));
    zext_ln260_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_355_p3),8));
    zext_ln261_1_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln266_fu_494_p3),64));
    zext_ln261_fu_377_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln261_fu_372_p2),64));
    zext_ln262_1_fu_484_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln262_1_reg_663),64));
    zext_ln262_2_fu_517_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln267_fu_511_p3),64));
    zext_ln262_fu_420_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln262_fu_415_p2),8));
end behav;
