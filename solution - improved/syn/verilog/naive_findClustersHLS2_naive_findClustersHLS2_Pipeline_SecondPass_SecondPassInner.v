// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module naive_findClustersHLS2_naive_findClustersHLS2_Pipeline_SecondPass_SecondPassInner (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        grid_address0,
        grid_ce0,
        grid_q0,
        clusterGrid1_address0,
        clusterGrid1_ce0,
        clusterGrid1_q0,
        clusterGrid1_address1,
        clusterGrid1_ce1,
        clusterGrid1_q1,
        clusterGrid2_address1,
        clusterGrid2_ce1,
        clusterGrid2_we1,
        clusterGrid2_d1
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] grid_address0;
output   grid_ce0;
input  [0:0] grid_q0;
output  [7:0] clusterGrid1_address0;
output   clusterGrid1_ce0;
input  [15:0] clusterGrid1_q0;
output  [7:0] clusterGrid1_address1;
output   clusterGrid1_ce1;
input  [15:0] clusterGrid1_q1;
output  [7:0] clusterGrid2_address1;
output   clusterGrid2_ce1;
output   clusterGrid2_we1;
output  [15:0] clusterGrid2_d1;

reg ap_idle;
reg grid_ce0;
reg[7:0] clusterGrid1_address0;
reg clusterGrid1_ce0;
reg[7:0] clusterGrid1_address1;
reg clusterGrid1_ce1;
reg[7:0] clusterGrid2_address1;
reg clusterGrid2_ce1;
reg clusterGrid2_we1;
reg[15:0] clusterGrid2_d1;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln252_fu_245_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_state11;
wire    ap_block_state11_pp0_stage10_iter0;
reg   [0:0] icmp_ln252_reg_555;
wire   [6:0] add_ln252_fu_251_p2;
reg   [6:0] add_ln252_reg_559;
wire   [3:0] select_ln252_fu_269_p3;
reg   [3:0] select_ln252_reg_564;
wire   [3:0] select_ln252_1_fu_283_p3;
reg   [3:0] select_ln252_1_reg_571;
wire   [7:0] sub_ln256_fu_311_p2;
reg   [7:0] sub_ln256_reg_576;
wire   [3:0] select_ln252_2_fu_323_p3;
reg   [3:0] select_ln252_2_reg_582;
wire   [7:0] zext_ln256_1_fu_331_p1;
reg   [7:0] zext_ln256_1_reg_588;
reg   [7:0] clusterGrid1_addr_reg_598;
reg   [7:0] clusterGrid2_addr_reg_603;
wire   [7:0] sub_ln260_fu_366_p2;
reg   [7:0] sub_ln260_reg_608;
wire    ap_CS_fsm_state2;
wire    ap_block_state2_pp0_stage1_iter0;
wire   [7:0] add_ln261_fu_372_p2;
reg   [7:0] add_ln261_reg_613;
reg   [7:0] clusterGrid1_addr_1_reg_618;
reg   [7:0] clusterGrid2_addr_1_reg_623;
reg   [0:0] grid_load_reg_628;
wire   [3:0] add_ln254_fu_383_p2;
reg   [3:0] add_ln254_reg_632;
wire   [7:0] add_ln260_fu_403_p2;
reg   [7:0] add_ln260_reg_643;
reg   [7:0] clusterGrid1_addr_3_reg_648;
reg   [7:0] clusterGrid2_addr_2_reg_653;
reg   [7:0] clusterGrid2_addr_3_reg_658;
wire   [7:0] add_ln262_1_fu_424_p2;
reg   [7:0] add_ln262_1_reg_663;
wire    ap_CS_fsm_state3;
wire    ap_block_state3_pp0_stage2_iter0;
wire   [7:0] add_ln259_1_fu_457_p2;
reg   [7:0] add_ln259_1_reg_669;
wire   [7:0] select_ln265_fu_473_p3;
reg   [7:0] select_ln265_reg_679;
wire    ap_CS_fsm_state4;
wire    ap_block_state4_pp0_stage3_iter0;
wire   [63:0] zext_ln262_1_fu_484_p1;
reg   [63:0] zext_ln262_1_reg_689;
wire    ap_CS_fsm_state5;
wire    ap_block_state5_pp0_stage4_iter0;
wire   [7:0] select_ln266_fu_494_p3;
reg   [7:0] select_ln266_reg_699;
wire    ap_CS_fsm_state6;
wire    ap_block_state6_pp0_stage5_iter0;
reg   [15:0] minClusterID_8_reg_714;
wire    ap_CS_fsm_state7;
wire    ap_block_state7_pp0_stage6_iter0;
wire   [63:0] zext_ln256_2_fu_341_p1;
wire   [63:0] zext_ln261_fu_377_p1;
wire   [63:0] zext_ln259_1_fu_397_p1;
wire   [63:0] zext_ln260_1_fu_409_p1;
wire   [63:0] zext_ln259_3_fu_462_p1;
wire   [63:0] zext_ln260_2_fu_479_p1;
wire   [63:0] zext_ln261_1_fu_500_p1;
wire   [63:0] zext_ln262_2_fu_517_p1;
reg   [3:0] j_fu_66;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_j_load;
reg   [3:0] i_fu_70;
reg   [3:0] ap_sig_allocacmp_i_load;
reg   [6:0] indvar_flatten6_fu_74;
reg   [6:0] ap_sig_allocacmp_indvar_flatten6_load;
wire    ap_CS_fsm_state8;
wire    ap_block_state8_pp0_stage7_iter0;
wire    ap_CS_fsm_state9;
wire    ap_block_state9_pp0_stage8_iter0;
wire    ap_CS_fsm_state10;
wire    ap_block_state10_pp0_stage9_iter0;
wire   [0:0] icmp_ln254_fu_263_p2;
wire   [3:0] indvars_iv_next24916_fu_277_p2;
wire   [5:0] tmp_7_fu_299_p3;
wire   [7:0] tmp_6_fu_291_p3;
wire   [7:0] zext_ln256_fu_307_p1;
wire   [3:0] indvars_iv_next249_mid1_fu_317_p2;
wire   [7:0] add_ln256_fu_335_p2;
wire   [5:0] tmp_9_fu_355_p3;
wire   [7:0] tmp_8_fu_348_p3;
wire   [7:0] zext_ln260_fu_362_p1;
wire   [7:0] zext_ln259_fu_388_p1;
wire   [7:0] add_ln259_fu_392_p2;
wire   [3:0] add_ln262_fu_415_p2;
wire   [7:0] zext_ln262_fu_420_p1;
wire   [0:0] icmp_ln264_fu_429_p2;
wire   [0:0] icmp_ln264_1_fu_435_p2;
wire   [0:0] and_ln264_fu_441_p2;
wire   [3:0] select_ln264_fu_447_p3;
wire   [7:0] zext_ln259_2_fu_453_p1;
wire   [0:0] grp_fu_215_p2;
wire   [0:0] grp_fu_221_p2;
wire   [0:0] and_ln265_fu_467_p2;
wire   [0:0] and_ln266_fu_488_p2;
wire   [0:0] and_ln267_fu_505_p2;
wire   [7:0] select_ln267_fu_511_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [10:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
#0 ap_done_reg = 1'b0;
end

naive_findClustersHLS2_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_start_int == 1'b1) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        i_fu_70 <= 4'd1;
    end else if (((icmp_ln252_reg_555 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        i_fu_70 <= select_ln252_1_reg_571;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        indvar_flatten6_fu_74 <= 7'd0;
    end else if (((icmp_ln252_reg_555 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        indvar_flatten6_fu_74 <= add_ln252_reg_559;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        j_fu_66 <= 4'd1;
    end else if (((icmp_ln252_reg_555 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        j_fu_66 <= add_ln254_reg_632;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        add_ln252_reg_559 <= add_ln252_fu_251_p2;
        icmp_ln252_reg_555 <= icmp_ln252_fu_245_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln254_reg_632 <= add_ln254_fu_383_p2;
        add_ln260_reg_643 <= add_ln260_fu_403_p2;
        add_ln261_reg_613 <= add_ln261_fu_372_p2;
        clusterGrid1_addr_1_reg_618 <= zext_ln261_fu_377_p1;
        clusterGrid1_addr_3_reg_648 <= zext_ln260_1_fu_409_p1;
        clusterGrid2_addr_1_reg_623 <= zext_ln261_fu_377_p1;
        clusterGrid2_addr_2_reg_653 <= zext_ln259_1_fu_397_p1;
        clusterGrid2_addr_3_reg_658 <= zext_ln260_1_fu_409_p1;
        grid_load_reg_628 <= grid_q0;
        sub_ln260_reg_608[7 : 2] <= sub_ln260_fu_366_p2[7 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln252_reg_555 == 1'd0) & (1'b1 == ap_CS_fsm_state3) & (grid_load_reg_628 == 1'd1))) begin
        add_ln259_1_reg_669 <= add_ln259_1_fu_457_p2;
        add_ln262_1_reg_663 <= add_ln262_1_fu_424_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (icmp_ln252_fu_245_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        clusterGrid1_addr_reg_598 <= zext_ln256_2_fu_341_p1;
        clusterGrid2_addr_reg_603 <= zext_ln256_2_fu_341_p1;
        select_ln252_1_reg_571 <= select_ln252_1_fu_283_p3;
        select_ln252_2_reg_582 <= select_ln252_2_fu_323_p3;
        select_ln252_reg_564 <= select_ln252_fu_269_p3;
        sub_ln256_reg_576[7 : 2] <= sub_ln256_fu_311_p2[7 : 2];
        zext_ln256_1_reg_588[3 : 0] <= zext_ln256_1_fu_331_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln252_reg_555 == 1'd0) & (1'b1 == ap_CS_fsm_state7) & (grid_load_reg_628 == 1'd1))) begin
        minClusterID_8_reg_714 <= clusterGrid1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln252_reg_555 == 1'd0) & (1'b1 == ap_CS_fsm_state4) & (grid_load_reg_628 == 1'd1))) begin
        select_ln265_reg_679 <= select_ln265_fu_473_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln252_reg_555 == 1'd0) & (1'b1 == ap_CS_fsm_state5) & (grid_load_reg_628 == 1'd1))) begin
        select_ln266_reg_699 <= select_ln266_fu_494_p3;
        zext_ln262_1_reg_689[7 : 0] <= zext_ln262_1_fu_484_p1[7 : 0];
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln252_fu_245_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_load = 4'd1;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_70;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten6_load = 7'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten6_load = indvar_flatten6_fu_74;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j_load = 4'd1;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_66;
    end
end

always @ (*) begin
    if (((icmp_ln252_reg_555 == 1'd0) & (1'b1 == ap_CS_fsm_state6) & (grid_load_reg_628 == 1'd1))) begin
        clusterGrid1_address0 = zext_ln262_2_fu_517_p1;
    end else if (((icmp_ln252_reg_555 == 1'd0) & (1'b1 == ap_CS_fsm_state5) & (grid_load_reg_628 == 1'd1))) begin
        clusterGrid1_address0 = zext_ln261_1_fu_500_p1;
    end else if (((icmp_ln252_reg_555 == 1'd0) & (1'b1 == ap_CS_fsm_state4) & (grid_load_reg_628 == 1'd1))) begin
        clusterGrid1_address0 = zext_ln260_2_fu_479_p1;
    end else if (((icmp_ln252_reg_555 == 1'd0) & (1'b1 == ap_CS_fsm_state3) & (grid_load_reg_628 == 1'd1))) begin
        clusterGrid1_address0 = zext_ln259_3_fu_462_p1;
    end else if (((grid_q0 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        clusterGrid1_address0 = zext_ln259_1_fu_397_p1;
    end else begin
        clusterGrid1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln252_reg_555 == 1'd0) & (1'b1 == ap_CS_fsm_state5) & (grid_load_reg_628 == 1'd1))) begin
        clusterGrid1_address1 = zext_ln262_1_fu_484_p1;
    end else if (((icmp_ln252_reg_555 == 1'd0) & (1'b1 == ap_CS_fsm_state4) & (grid_load_reg_628 == 1'd1))) begin
        clusterGrid1_address1 = clusterGrid1_addr_1_reg_618;
    end else if (((icmp_ln252_reg_555 == 1'd0) & (1'b1 == ap_CS_fsm_state3) & (grid_load_reg_628 == 1'd1))) begin
        clusterGrid1_address1 = clusterGrid1_addr_3_reg_648;
    end else if (((grid_q0 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        clusterGrid1_address1 = clusterGrid1_addr_reg_598;
    end else begin
        clusterGrid1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((grid_q0 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((icmp_ln252_reg_555 == 1'd0) & (1'b1 == ap_CS_fsm_state6) & (grid_load_reg_628 == 1'd1)) | ((icmp_ln252_reg_555 == 1'd0) & (1'b1 == ap_CS_fsm_state5) & (grid_load_reg_628 == 1'd1)) | ((icmp_ln252_reg_555 == 1'd0) & (1'b1 == ap_CS_fsm_state4) & (grid_load_reg_628 == 1'd1)) | ((icmp_ln252_reg_555 == 1'd0) & (1'b1 == ap_CS_fsm_state3) & (grid_load_reg_628 == 1'd1)))) begin
        clusterGrid1_ce0 = 1'b1;
    end else begin
        clusterGrid1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((grid_q0 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((icmp_ln252_reg_555 == 1'd0) & (1'b1 == ap_CS_fsm_state5) & (grid_load_reg_628 == 1'd1)) | ((icmp_ln252_reg_555 == 1'd0) & (1'b1 == ap_CS_fsm_state4) & (grid_load_reg_628 == 1'd1)) | ((icmp_ln252_reg_555 == 1'd0) & (1'b1 == ap_CS_fsm_state3) & (grid_load_reg_628 == 1'd1)))) begin
        clusterGrid1_ce1 = 1'b1;
    end else begin
        clusterGrid1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln252_reg_555 == 1'd0) & (grid_load_reg_628 == 1'd1))) begin
        if ((1'b1 == ap_CS_fsm_state11)) begin
            clusterGrid2_address1 = zext_ln262_1_reg_689;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            clusterGrid2_address1 = clusterGrid2_addr_1_reg_623;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            clusterGrid2_address1 = clusterGrid2_addr_3_reg_658;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            clusterGrid2_address1 = clusterGrid2_addr_2_reg_653;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            clusterGrid2_address1 = clusterGrid2_addr_reg_603;
        end else begin
            clusterGrid2_address1 = 'bx;
        end
    end else begin
        clusterGrid2_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln252_reg_555 == 1'd0) & (1'b1 == ap_CS_fsm_state11) & (grid_load_reg_628 == 1'd1)) | ((icmp_ln252_reg_555 == 1'd0) & (1'b1 == ap_CS_fsm_state10) & (grid_load_reg_628 == 1'd1)) | ((icmp_ln252_reg_555 == 1'd0) & (1'b1 == ap_CS_fsm_state9) & (grid_load_reg_628 == 1'd1)) | ((icmp_ln252_reg_555 == 1'd0) & (1'b1 == ap_CS_fsm_state8) & (grid_load_reg_628 == 1'd1)) | ((icmp_ln252_reg_555 == 1'd0) & (1'b1 == ap_CS_fsm_state7) & (grid_load_reg_628 == 1'd1)))) begin
        clusterGrid2_ce1 = 1'b1;
    end else begin
        clusterGrid2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln252_reg_555 == 1'd0) & (1'b1 == ap_CS_fsm_state11) & (grid_load_reg_628 == 1'd1)) | ((icmp_ln252_reg_555 == 1'd0) & (1'b1 == ap_CS_fsm_state10) & (grid_load_reg_628 == 1'd1)) | ((icmp_ln252_reg_555 == 1'd0) & (1'b1 == ap_CS_fsm_state9) & (grid_load_reg_628 == 1'd1)) | ((icmp_ln252_reg_555 == 1'd0) & (1'b1 == ap_CS_fsm_state8) & (grid_load_reg_628 == 1'd1)))) begin
        clusterGrid2_d1 = minClusterID_8_reg_714;
    end else if (((icmp_ln252_reg_555 == 1'd0) & (1'b1 == ap_CS_fsm_state7) & (grid_load_reg_628 == 1'd1))) begin
        clusterGrid2_d1 = clusterGrid1_q0;
    end else begin
        clusterGrid2_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln252_reg_555 == 1'd0) & (1'b1 == ap_CS_fsm_state11) & (grid_load_reg_628 == 1'd1)) | ((icmp_ln252_reg_555 == 1'd0) & (1'b1 == ap_CS_fsm_state10) & (grid_load_reg_628 == 1'd1)) | ((icmp_ln252_reg_555 == 1'd0) & (1'b1 == ap_CS_fsm_state9) & (grid_load_reg_628 == 1'd1)) | ((icmp_ln252_reg_555 == 1'd0) & (1'b1 == ap_CS_fsm_state8) & (grid_load_reg_628 == 1'd1)) | ((icmp_ln252_reg_555 == 1'd0) & (1'b1 == ap_CS_fsm_state7) & (grid_load_reg_628 == 1'd1)))) begin
        clusterGrid2_we1 = 1'b1;
    end else begin
        clusterGrid2_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        grid_ce0 = 1'b1;
    end else begin
        grid_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start_int == 1'b1) & (icmp_ln252_fu_245_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln252_fu_251_p2 = (ap_sig_allocacmp_indvar_flatten6_load + 7'd1);

assign add_ln254_fu_383_p2 = (select_ln252_reg_564 + 4'd1);

assign add_ln256_fu_335_p2 = (sub_ln256_fu_311_p2 + zext_ln256_1_fu_331_p1);

assign add_ln259_1_fu_457_p2 = (sub_ln256_reg_576 + zext_ln259_2_fu_453_p1);

assign add_ln259_fu_392_p2 = (sub_ln256_reg_576 + zext_ln259_fu_388_p1);

assign add_ln260_fu_403_p2 = (sub_ln260_fu_366_p2 + zext_ln259_fu_388_p1);

assign add_ln261_fu_372_p2 = (sub_ln260_fu_366_p2 + zext_ln256_1_reg_588);

assign add_ln262_1_fu_424_p2 = (sub_ln260_reg_608 + zext_ln262_fu_420_p1);

assign add_ln262_fu_415_p2 = ($signed(select_ln252_reg_564) + $signed(4'd15));

assign and_ln264_fu_441_p2 = (icmp_ln264_fu_429_p2 & icmp_ln264_1_fu_435_p2);

assign and_ln265_fu_467_p2 = (grp_fu_221_p2 & grp_fu_215_p2);

assign and_ln266_fu_488_p2 = (grp_fu_221_p2 & grp_fu_215_p2);

assign and_ln267_fu_505_p2 = (grp_fu_221_p2 & grp_fu_215_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_state10_pp0_stage9_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage10_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign grid_address0 = zext_ln256_2_fu_341_p1;

assign grp_fu_215_p2 = ((clusterGrid1_q1 != 16'd0) ? 1'b1 : 1'b0);

assign grp_fu_221_p2 = (($signed(clusterGrid1_q1) < $signed(clusterGrid1_q0)) ? 1'b1 : 1'b0);

assign icmp_ln252_fu_245_p2 = ((ap_sig_allocacmp_indvar_flatten6_load == 7'd100) ? 1'b1 : 1'b0);

assign icmp_ln254_fu_263_p2 = ((ap_sig_allocacmp_j_load == 4'd11) ? 1'b1 : 1'b0);

assign icmp_ln264_1_fu_435_p2 = (($signed(clusterGrid1_q0) < $signed(clusterGrid1_q1)) ? 1'b1 : 1'b0);

assign icmp_ln264_fu_429_p2 = ((clusterGrid1_q0 != 16'd0) ? 1'b1 : 1'b0);

assign indvars_iv_next24916_fu_277_p2 = (ap_sig_allocacmp_i_load + 4'd1);

assign indvars_iv_next249_mid1_fu_317_p2 = (ap_sig_allocacmp_i_load + 4'd2);

assign select_ln252_1_fu_283_p3 = ((icmp_ln254_fu_263_p2[0:0] == 1'b1) ? indvars_iv_next24916_fu_277_p2 : ap_sig_allocacmp_i_load);

assign select_ln252_2_fu_323_p3 = ((icmp_ln254_fu_263_p2[0:0] == 1'b1) ? indvars_iv_next249_mid1_fu_317_p2 : indvars_iv_next24916_fu_277_p2);

assign select_ln252_fu_269_p3 = ((icmp_ln254_fu_263_p2[0:0] == 1'b1) ? 4'd1 : ap_sig_allocacmp_j_load);

assign select_ln264_fu_447_p3 = ((and_ln264_fu_441_p2[0:0] == 1'b1) ? add_ln254_reg_632 : select_ln252_reg_564);

assign select_ln265_fu_473_p3 = ((and_ln265_fu_467_p2[0:0] == 1'b1) ? add_ln260_reg_643 : add_ln259_1_reg_669);

assign select_ln266_fu_494_p3 = ((and_ln266_fu_488_p2[0:0] == 1'b1) ? add_ln261_reg_613 : select_ln265_reg_679);

assign select_ln267_fu_511_p3 = ((and_ln267_fu_505_p2[0:0] == 1'b1) ? add_ln262_1_reg_663 : select_ln266_reg_699);

assign sub_ln256_fu_311_p2 = (tmp_6_fu_291_p3 - zext_ln256_fu_307_p1);

assign sub_ln260_fu_366_p2 = (tmp_8_fu_348_p3 - zext_ln260_fu_362_p1);

assign tmp_6_fu_291_p3 = {{select_ln252_1_fu_283_p3}, {4'd0}};

assign tmp_7_fu_299_p3 = {{select_ln252_1_fu_283_p3}, {2'd0}};

assign tmp_8_fu_348_p3 = {{select_ln252_2_reg_582}, {4'd0}};

assign tmp_9_fu_355_p3 = {{select_ln252_2_reg_582}, {2'd0}};

assign zext_ln256_1_fu_331_p1 = select_ln252_fu_269_p3;

assign zext_ln256_2_fu_341_p1 = add_ln256_fu_335_p2;

assign zext_ln256_fu_307_p1 = tmp_7_fu_299_p3;

assign zext_ln259_1_fu_397_p1 = add_ln259_fu_392_p2;

assign zext_ln259_2_fu_453_p1 = select_ln264_fu_447_p3;

assign zext_ln259_3_fu_462_p1 = add_ln259_1_fu_457_p2;

assign zext_ln259_fu_388_p1 = add_ln254_fu_383_p2;

assign zext_ln260_1_fu_409_p1 = add_ln260_fu_403_p2;

assign zext_ln260_2_fu_479_p1 = select_ln265_fu_473_p3;

assign zext_ln260_fu_362_p1 = tmp_9_fu_355_p3;

assign zext_ln261_1_fu_500_p1 = select_ln266_fu_494_p3;

assign zext_ln261_fu_377_p1 = add_ln261_fu_372_p2;

assign zext_ln262_1_fu_484_p1 = add_ln262_1_reg_663;

assign zext_ln262_2_fu_517_p1 = select_ln267_fu_511_p3;

assign zext_ln262_fu_420_p1 = add_ln262_fu_415_p2;

always @ (posedge ap_clk) begin
    sub_ln256_reg_576[1:0] <= 2'b00;
    zext_ln256_1_reg_588[7:4] <= 4'b0000;
    sub_ln260_reg_608[1:0] <= 2'b00;
    zext_ln262_1_reg_689[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
end

endmodule //naive_findClustersHLS2_naive_findClustersHLS2_Pipeline_SecondPass_SecondPassInner
