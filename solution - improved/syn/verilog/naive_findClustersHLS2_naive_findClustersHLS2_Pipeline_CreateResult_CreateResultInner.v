// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module naive_findClustersHLS2_naive_findClustersHLS2_Pipeline_CreateResult_CreateResultInner (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        grid_address0,
        grid_ce0,
        grid_q0,
        pointsGrid_address0,
        pointsGrid_ce0,
        pointsGrid_we0,
        pointsGrid_d0,
        clusterGrid1_address0,
        clusterGrid1_ce0,
        clusterGrid1_q0,
        clusterGrid2_address0,
        clusterGrid2_ce0,
        clusterGrid2_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] grid_address0;
output   grid_ce0;
input  [0:0] grid_q0;
output  [7:0] pointsGrid_address0;
output   pointsGrid_ce0;
output   pointsGrid_we0;
output  [95:0] pointsGrid_d0;
output  [7:0] clusterGrid1_address0;
output   clusterGrid1_ce0;
input  [15:0] clusterGrid1_q0;
output  [7:0] clusterGrid2_address0;
output   clusterGrid2_ce0;
input  [15:0] clusterGrid2_q0;

reg ap_idle;
reg grid_ce0;
reg pointsGrid_ce0;
reg pointsGrid_we0;
reg clusterGrid1_ce0;
reg clusterGrid2_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln280_fu_148_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [3:0] select_ln280_fu_178_p3;
reg   [3:0] select_ln280_reg_336;
wire    ap_block_pp0_stage0_11001;
wire   [3:0] select_ln280_1_fu_186_p3;
reg   [3:0] select_ln280_1_reg_342;
wire   [63:0] zext_ln284_2_fu_230_p1;
reg   [63:0] zext_ln284_2_reg_347;
wire    ap_block_pp0_stage0;
reg   [3:0] j_fu_66;
wire   [3:0] add_ln282_fu_237_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_j_load;
reg   [3:0] i_fu_70;
reg   [3:0] ap_sig_allocacmp_i_load;
reg   [7:0] indvar_flatten13_fu_74;
wire   [7:0] add_ln280_1_fu_154_p2;
reg   [7:0] ap_sig_allocacmp_indvar_flatten13_load;
wire   [0:0] icmp_ln282_fu_172_p2;
wire   [3:0] add_ln280_fu_166_p2;
wire   [5:0] tmp_2_fu_202_p3;
wire   [7:0] tmp_s_fu_194_p3;
wire   [7:0] zext_ln284_fu_210_p1;
wire   [7:0] sub_ln284_fu_214_p2;
wire   [7:0] zext_ln284_1_fu_220_p1;
wire   [7:0] add_ln284_fu_224_p2;
wire   [31:0] zext_ln280_fu_258_p1;
wire   [35:0] tmp_fu_264_p3;
wire   [0:0] icmp_ln285_fu_275_p2;
wire   [15:0] clusterID_fu_281_p3;
wire   [31:0] zext_ln288_fu_261_p1;
wire   [79:0] tmp_1_fu_289_p4;
wire   [79:0] zext_ln285_fu_271_p1;
wire   [79:0] select_ln284_fu_299_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

naive_findClustersHLS2_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln280_fu_148_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_70 <= select_ln280_1_fu_186_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_70 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln280_fu_148_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten13_fu_74 <= add_ln280_1_fu_154_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten13_fu_74 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln280_fu_148_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_66 <= add_ln282_fu_237_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_66 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln280_fu_148_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln280_1_reg_342 <= select_ln280_1_fu_186_p3;
        select_ln280_reg_336 <= select_ln280_fu_178_p3;
        zext_ln284_2_reg_347[7 : 0] <= zext_ln284_2_fu_230_p1[7 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln280_fu_148_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_load = 4'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_70;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten13_load = 8'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten13_load = indvar_flatten13_fu_74;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j_load = 4'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_66;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        clusterGrid1_ce0 = 1'b1;
    end else begin
        clusterGrid1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        clusterGrid2_ce0 = 1'b1;
    end else begin
        clusterGrid2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grid_ce0 = 1'b1;
    end else begin
        grid_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pointsGrid_ce0 = 1'b1;
    end else begin
        pointsGrid_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pointsGrid_we0 = 1'b1;
    end else begin
        pointsGrid_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln280_1_fu_154_p2 = (ap_sig_allocacmp_indvar_flatten13_load + 8'd1);

assign add_ln280_fu_166_p2 = (ap_sig_allocacmp_i_load + 4'd1);

assign add_ln282_fu_237_p2 = (select_ln280_fu_178_p3 + 4'd1);

assign add_ln284_fu_224_p2 = (sub_ln284_fu_214_p2 + zext_ln284_1_fu_220_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign clusterGrid1_address0 = zext_ln284_2_fu_230_p1;

assign clusterGrid2_address0 = zext_ln284_2_fu_230_p1;

assign clusterID_fu_281_p3 = ((icmp_ln285_fu_275_p2[0:0] == 1'b1) ? clusterGrid1_q0 : clusterGrid2_q0);

assign grid_address0 = zext_ln284_2_fu_230_p1;

assign icmp_ln280_fu_148_p2 = ((ap_sig_allocacmp_indvar_flatten13_load == 8'd144) ? 1'b1 : 1'b0);

assign icmp_ln282_fu_172_p2 = ((ap_sig_allocacmp_j_load == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln285_fu_275_p2 = ((clusterGrid2_q0 == 16'd0) ? 1'b1 : 1'b0);

assign pointsGrid_address0 = zext_ln284_2_reg_347;

assign pointsGrid_d0 = $signed(select_ln284_fu_299_p3);

assign select_ln280_1_fu_186_p3 = ((icmp_ln282_fu_172_p2[0:0] == 1'b1) ? add_ln280_fu_166_p2 : ap_sig_allocacmp_i_load);

assign select_ln280_fu_178_p3 = ((icmp_ln282_fu_172_p2[0:0] == 1'b1) ? 4'd0 : ap_sig_allocacmp_j_load);

assign select_ln284_fu_299_p3 = ((grid_q0[0:0] == 1'b1) ? tmp_1_fu_289_p4 : zext_ln285_fu_271_p1);

assign sub_ln284_fu_214_p2 = (tmp_s_fu_194_p3 - zext_ln284_fu_210_p1);

assign tmp_1_fu_289_p4 = {{{clusterID_fu_281_p3}, {zext_ln288_fu_261_p1}}, {zext_ln280_fu_258_p1}};

assign tmp_2_fu_202_p3 = {{select_ln280_1_fu_186_p3}, {2'd0}};

assign tmp_fu_264_p3 = {{select_ln280_reg_336}, {zext_ln280_fu_258_p1}};

assign tmp_s_fu_194_p3 = {{select_ln280_1_fu_186_p3}, {4'd0}};

assign zext_ln280_fu_258_p1 = select_ln280_1_reg_342;

assign zext_ln284_1_fu_220_p1 = select_ln280_fu_178_p3;

assign zext_ln284_2_fu_230_p1 = add_ln284_fu_224_p2;

assign zext_ln284_fu_210_p1 = tmp_2_fu_202_p3;

assign zext_ln285_fu_271_p1 = tmp_fu_264_p3;

assign zext_ln288_fu_261_p1 = select_ln280_reg_336;

always @ (posedge ap_clk) begin
    zext_ln284_2_reg_347[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
end

endmodule //naive_findClustersHLS2_naive_findClustersHLS2_Pipeline_CreateResult_CreateResultInner
