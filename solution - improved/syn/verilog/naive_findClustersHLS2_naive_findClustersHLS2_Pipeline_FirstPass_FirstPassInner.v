// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module naive_findClustersHLS2_naive_findClustersHLS2_Pipeline_FirstPass_FirstPassInner (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        grid_address0,
        grid_ce0,
        grid_q0,
        clusterGrid1_address0,
        clusterGrid1_ce0,
        clusterGrid1_q0,
        clusterGrid1_address1,
        clusterGrid1_ce1,
        clusterGrid1_we1,
        clusterGrid1_d1,
        clusterGrid1_q1
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] grid_address0;
output   grid_ce0;
input  [0:0] grid_q0;
output  [7:0] clusterGrid1_address0;
output   clusterGrid1_ce0;
input  [15:0] clusterGrid1_q0;
output  [7:0] clusterGrid1_address1;
output   clusterGrid1_ce1;
output   clusterGrid1_we1;
output  [15:0] clusterGrid1_d1;
input  [15:0] clusterGrid1_q1;

reg ap_idle;
reg grid_ce0;
reg[7:0] clusterGrid1_address0;
reg clusterGrid1_ce0;
reg[7:0] clusterGrid1_address1;
reg clusterGrid1_ce1;
reg clusterGrid1_we1;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln227_fu_174_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_state4;
wire    ap_block_state4_pp0_stage3_iter0;
reg   [0:0] icmp_ln227_reg_504;
wire   [6:0] add_ln227_1_fu_180_p2;
reg   [6:0] add_ln227_1_reg_508;
wire   [3:0] select_ln227_fu_204_p3;
reg   [3:0] select_ln227_reg_513;
wire   [3:0] select_ln227_1_fu_212_p3;
reg   [3:0] select_ln227_1_reg_519;
wire   [7:0] sub_ln231_fu_240_p2;
reg   [7:0] sub_ln231_reg_524;
wire   [3:0] select_ln227_2_fu_252_p3;
reg   [3:0] select_ln227_2_reg_529;
wire   [7:0] zext_ln231_1_fu_260_p1;
reg   [7:0] zext_ln231_1_reg_535;
reg   [7:0] clusterGrid1_addr_5_reg_545;
reg   [7:0] clusterGrid1_addr_3_reg_550;
wire    ap_CS_fsm_state2;
wire    ap_block_state2_pp0_stage1_iter0;
reg   [0:0] grid_load_reg_555;
wire   [3:0] add_ln229_fu_310_p2;
reg   [3:0] add_ln229_reg_559;
reg   [7:0] clusterGrid1_addr_4_reg_564;
reg   [15:0] minClusterID_load_reg_579;
wire    ap_CS_fsm_state3;
wire    ap_block_state3_pp0_stage2_iter0;
wire   [15:0] minClusterID_12_fu_395_p3;
reg   [15:0] minClusterID_12_reg_586;
wire   [63:0] zext_ln231_2_fu_270_p1;
wire   [63:0] zext_ln235_fu_305_p1;
wire   [63:0] zext_ln236_1_fu_325_p1;
wire   [63:0] zext_ln233_1_fu_344_p1;
wire   [63:0] zext_ln234_1_fu_355_p1;
reg   [3:0] j_fu_64;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_j_load;
reg   [3:0] i_fu_68;
reg   [3:0] ap_sig_allocacmp_i_load;
reg   [6:0] indvar_flatten_fu_72;
reg   [6:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [15:0] minClusterID_fu_76;
wire   [15:0] maxClusterID_1_fu_452_p3;
wire   [15:0] minClusterID_16_fu_433_p3;
wire   [0:0] icmp_ln229_fu_198_p2;
wire   [3:0] add_ln227_fu_192_p2;
wire   [5:0] tmp_3_fu_228_p3;
wire   [7:0] tmp_2_fu_220_p3;
wire   [7:0] zext_ln231_fu_236_p1;
wire   [3:0] empty_fu_246_p2;
wire   [7:0] add_ln231_fu_264_p2;
wire   [5:0] tmp_5_fu_283_p3;
wire   [7:0] tmp_4_fu_276_p3;
wire   [7:0] zext_ln234_fu_290_p1;
wire   [7:0] sub_ln234_fu_294_p2;
wire   [7:0] add_ln235_fu_300_p2;
wire   [7:0] zext_ln236_fu_315_p1;
wire   [7:0] add_ln236_fu_319_p2;
wire   [3:0] add_ln233_fu_330_p2;
wire   [7:0] zext_ln233_fu_335_p1;
wire   [7:0] add_ln233_1_fu_339_p2;
wire   [7:0] add_ln234_fu_349_p2;
wire   [0:0] grp_fu_139_p2;
wire   [0:0] icmp_ln238_1_fu_363_p2;
wire   [0:0] and_ln238_fu_369_p2;
wire   [15:0] minClusterID_10_fu_375_p3;
wire   [0:0] grp_fu_145_p2;
wire   [0:0] icmp_ln239_1_fu_383_p2;
wire   [0:0] and_ln239_fu_389_p2;
wire   [0:0] icmp_ln240_1_fu_403_p2;
wire   [0:0] and_ln240_fu_408_p2;
wire   [15:0] minClusterID_14_fu_414_p3;
wire   [0:0] icmp_ln241_1_fu_421_p2;
wire   [0:0] and_ln241_fu_427_p2;
wire   [0:0] icmp_ln243_fu_442_p2;
wire   [15:0] maxClusterID_fu_447_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_done_reg = 1'b0;
end

naive_findClustersHLS2_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_start_int == 1'b1) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        i_fu_68 <= 4'd1;
    end else if (((icmp_ln227_reg_504 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        i_fu_68 <= select_ln227_1_reg_519;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        indvar_flatten_fu_72 <= 7'd0;
    end else if (((icmp_ln227_reg_504 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        indvar_flatten_fu_72 <= add_ln227_1_reg_508;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        j_fu_64 <= 4'd1;
    end else if (((icmp_ln227_reg_504 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        j_fu_64 <= add_ln229_reg_559;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        minClusterID_fu_76 <= 16'd1;
    end else if (((grid_load_reg_555 == 1'd1) & (icmp_ln227_reg_504 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        minClusterID_fu_76 <= maxClusterID_1_fu_452_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        add_ln227_1_reg_508 <= add_ln227_1_fu_180_p2;
        icmp_ln227_reg_504 <= icmp_ln227_fu_174_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln229_reg_559 <= add_ln229_fu_310_p2;
        clusterGrid1_addr_3_reg_550 <= zext_ln235_fu_305_p1;
        clusterGrid1_addr_4_reg_564 <= zext_ln236_1_fu_325_p1;
        grid_load_reg_555 <= grid_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (icmp_ln227_fu_174_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        clusterGrid1_addr_5_reg_545 <= zext_ln231_2_fu_270_p1;
        select_ln227_1_reg_519 <= select_ln227_1_fu_212_p3;
        select_ln227_2_reg_529 <= select_ln227_2_fu_252_p3;
        select_ln227_reg_513 <= select_ln227_fu_204_p3;
        sub_ln231_reg_524[7 : 2] <= sub_ln231_fu_240_p2[7 : 2];
        zext_ln231_1_reg_535[3 : 0] <= zext_ln231_1_fu_260_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((grid_load_reg_555 == 1'd1) & (icmp_ln227_reg_504 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        minClusterID_12_reg_586 <= minClusterID_12_fu_395_p3;
        minClusterID_load_reg_579 <= minClusterID_fu_76;
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln227_fu_174_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_load = 4'd1;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_68;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 7'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_72;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j_load = 4'd1;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_64;
    end
end

always @ (*) begin
    if (((grid_load_reg_555 == 1'd1) & (icmp_ln227_reg_504 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        clusterGrid1_address0 = clusterGrid1_addr_4_reg_564;
    end else if (((grid_q0 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        clusterGrid1_address0 = zext_ln234_1_fu_355_p1;
    end else begin
        clusterGrid1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((grid_load_reg_555 == 1'd1) & (icmp_ln227_reg_504 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        clusterGrid1_address1 = clusterGrid1_addr_5_reg_545;
    end else if (((grid_load_reg_555 == 1'd1) & (icmp_ln227_reg_504 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        clusterGrid1_address1 = clusterGrid1_addr_3_reg_550;
    end else if (((grid_q0 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        clusterGrid1_address1 = zext_ln233_1_fu_344_p1;
    end else begin
        clusterGrid1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((grid_q0 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((grid_load_reg_555 == 1'd1) & (icmp_ln227_reg_504 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        clusterGrid1_ce0 = 1'b1;
    end else begin
        clusterGrid1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((grid_q0 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((grid_load_reg_555 == 1'd1) & (icmp_ln227_reg_504 == 1'd0) & (1'b1 == ap_CS_fsm_state4)) | ((grid_load_reg_555 == 1'd1) & (icmp_ln227_reg_504 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        clusterGrid1_ce1 = 1'b1;
    end else begin
        clusterGrid1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((grid_load_reg_555 == 1'd1) & (icmp_ln227_reg_504 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        clusterGrid1_we1 = 1'b1;
    end else begin
        clusterGrid1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        grid_ce0 = 1'b1;
    end else begin
        grid_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start_int == 1'b1) & (icmp_ln227_fu_174_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln227_1_fu_180_p2 = (ap_sig_allocacmp_indvar_flatten_load + 7'd1);

assign add_ln227_fu_192_p2 = (ap_sig_allocacmp_i_load + 4'd1);

assign add_ln229_fu_310_p2 = (select_ln227_reg_513 + 4'd1);

assign add_ln231_fu_264_p2 = (sub_ln231_fu_240_p2 + zext_ln231_1_fu_260_p1);

assign add_ln233_1_fu_339_p2 = (sub_ln231_reg_524 + zext_ln233_fu_335_p1);

assign add_ln233_fu_330_p2 = ($signed(select_ln227_reg_513) + $signed(4'd15));

assign add_ln234_fu_349_p2 = (sub_ln234_fu_294_p2 + zext_ln233_fu_335_p1);

assign add_ln235_fu_300_p2 = (sub_ln234_fu_294_p2 + zext_ln231_1_reg_535);

assign add_ln236_fu_319_p2 = (sub_ln234_fu_294_p2 + zext_ln236_fu_315_p1);

assign and_ln238_fu_369_p2 = (icmp_ln238_1_fu_363_p2 & grp_fu_139_p2);

assign and_ln239_fu_389_p2 = (icmp_ln239_1_fu_383_p2 & grp_fu_145_p2);

assign and_ln240_fu_408_p2 = (icmp_ln240_1_fu_403_p2 & grp_fu_139_p2);

assign and_ln241_fu_427_p2 = (icmp_ln241_1_fu_421_p2 & grp_fu_145_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign clusterGrid1_d1 = minClusterID_16_fu_433_p3;

assign empty_fu_246_p2 = ($signed(ap_sig_allocacmp_i_load) + $signed(4'd15));

assign grid_address0 = zext_ln231_2_fu_270_p1;

assign grp_fu_139_p2 = ((clusterGrid1_q1 != 16'd0) ? 1'b1 : 1'b0);

assign grp_fu_145_p2 = ((clusterGrid1_q0 != 16'd0) ? 1'b1 : 1'b0);

assign icmp_ln227_fu_174_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 7'd100) ? 1'b1 : 1'b0);

assign icmp_ln229_fu_198_p2 = ((ap_sig_allocacmp_j_load == 4'd11) ? 1'b1 : 1'b0);

assign icmp_ln238_1_fu_363_p2 = (($signed(clusterGrid1_q1) < $signed(minClusterID_fu_76)) ? 1'b1 : 1'b0);

assign icmp_ln239_1_fu_383_p2 = (($signed(clusterGrid1_q0) < $signed(minClusterID_10_fu_375_p3)) ? 1'b1 : 1'b0);

assign icmp_ln240_1_fu_403_p2 = (($signed(clusterGrid1_q1) < $signed(minClusterID_12_reg_586)) ? 1'b1 : 1'b0);

assign icmp_ln241_1_fu_421_p2 = (($signed(clusterGrid1_q0) < $signed(minClusterID_14_fu_414_p3)) ? 1'b1 : 1'b0);

assign icmp_ln243_fu_442_p2 = ((minClusterID_16_fu_433_p3 == minClusterID_load_reg_579) ? 1'b1 : 1'b0);

assign maxClusterID_1_fu_452_p3 = ((icmp_ln243_fu_442_p2[0:0] == 1'b1) ? maxClusterID_fu_447_p2 : minClusterID_load_reg_579);

assign maxClusterID_fu_447_p2 = (minClusterID_load_reg_579 + 16'd1);

assign minClusterID_10_fu_375_p3 = ((and_ln238_fu_369_p2[0:0] == 1'b1) ? clusterGrid1_q1 : minClusterID_fu_76);

assign minClusterID_12_fu_395_p3 = ((and_ln239_fu_389_p2[0:0] == 1'b1) ? clusterGrid1_q0 : minClusterID_10_fu_375_p3);

assign minClusterID_14_fu_414_p3 = ((and_ln240_fu_408_p2[0:0] == 1'b1) ? clusterGrid1_q1 : minClusterID_12_reg_586);

assign minClusterID_16_fu_433_p3 = ((and_ln241_fu_427_p2[0:0] == 1'b1) ? clusterGrid1_q0 : minClusterID_14_fu_414_p3);

assign select_ln227_1_fu_212_p3 = ((icmp_ln229_fu_198_p2[0:0] == 1'b1) ? add_ln227_fu_192_p2 : ap_sig_allocacmp_i_load);

assign select_ln227_2_fu_252_p3 = ((icmp_ln229_fu_198_p2[0:0] == 1'b1) ? ap_sig_allocacmp_i_load : empty_fu_246_p2);

assign select_ln227_fu_204_p3 = ((icmp_ln229_fu_198_p2[0:0] == 1'b1) ? 4'd1 : ap_sig_allocacmp_j_load);

assign sub_ln231_fu_240_p2 = (tmp_2_fu_220_p3 - zext_ln231_fu_236_p1);

assign sub_ln234_fu_294_p2 = (tmp_4_fu_276_p3 - zext_ln234_fu_290_p1);

assign tmp_2_fu_220_p3 = {{select_ln227_1_fu_212_p3}, {4'd0}};

assign tmp_3_fu_228_p3 = {{select_ln227_1_fu_212_p3}, {2'd0}};

assign tmp_4_fu_276_p3 = {{select_ln227_2_reg_529}, {4'd0}};

assign tmp_5_fu_283_p3 = {{select_ln227_2_reg_529}, {2'd0}};

assign zext_ln231_1_fu_260_p1 = select_ln227_fu_204_p3;

assign zext_ln231_2_fu_270_p1 = add_ln231_fu_264_p2;

assign zext_ln231_fu_236_p1 = tmp_3_fu_228_p3;

assign zext_ln233_1_fu_344_p1 = add_ln233_1_fu_339_p2;

assign zext_ln233_fu_335_p1 = add_ln233_fu_330_p2;

assign zext_ln234_1_fu_355_p1 = add_ln234_fu_349_p2;

assign zext_ln234_fu_290_p1 = tmp_5_fu_283_p3;

assign zext_ln235_fu_305_p1 = add_ln235_fu_300_p2;

assign zext_ln236_1_fu_325_p1 = add_ln236_fu_319_p2;

assign zext_ln236_fu_315_p1 = add_ln229_fu_310_p2;

always @ (posedge ap_clk) begin
    sub_ln231_reg_524[1:0] <= 2'b00;
    zext_ln231_1_reg_535[7:4] <= 4'b0000;
end

endmodule //naive_findClustersHLS2_naive_findClustersHLS2_Pipeline_FirstPass_FirstPassInner
